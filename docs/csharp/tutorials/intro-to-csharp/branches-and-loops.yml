### YamlMime:Tutorial
title: <span data-ttu-id="7ea27-101">Informazioni sulla logica condizionale con istruzioni per rami e cicli</span><span class="sxs-lookup"><span data-stu-id="7ea27-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Rami e cicli - Esercitazione interattiva introduttiva su C#
  description: In questa esercitazione sui rami e i cicli si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="7ea27-105">Raccolta di elenchi</span><span class="sxs-lookup"><span data-stu-id="7ea27-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: it-IT
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850787"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="7ea27-106">Questa esercitazione descrive come scrivere codice che esamina le variabili e modifica il percorso di esecuzione in base a queste variabili.</span><span class="sxs-lookup"><span data-stu-id="7ea27-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="7ea27-107">Si userà il browser per scrivere codice C# in modo interattivo e visualizzare i risultati della compilazione ed esecuzione del codice.</span><span class="sxs-lookup"><span data-stu-id="7ea27-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="7ea27-108">L'esercitazione contiene una serie di lezioni che esplorano i costrutti per rami e cicli in C#.</span><span class="sxs-lookup"><span data-stu-id="7ea27-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="7ea27-109">Queste lezioni presentano le nozioni fondamentali del linguaggio C#.</span><span class="sxs-lookup"><span data-stu-id="7ea27-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="7ea27-110">Prendere decisioni usando l'istruzione if</span><span class="sxs-lookup"><span data-stu-id="7ea27-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="7ea27-111">Eseguire il codice seguente nella finestra interattiva.</span><span class="sxs-lookup"><span data-stu-id="7ea27-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="7ea27-112">A tale scopo, digitare il blocco di codice seguente nella finestra interattiva e fare clic sul pulsante **Esegui**:</span><span class="sxs-lookup"><span data-stu-id="7ea27-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="7ea27-113">Modificare la dichiarazione di `b` in modo che la somma sia minore di 10:</span><span class="sxs-lookup"><span data-stu-id="7ea27-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="7ea27-114">Fare di nuovo clic sul pulsante **Esegui**.</span><span class="sxs-lookup"><span data-stu-id="7ea27-114">Click the **Run** button again.</span></span> <span data-ttu-id="7ea27-115">Dato che la risposta è minore a 10, non viene visualizzato nulla.</span><span class="sxs-lookup"><span data-stu-id="7ea27-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="7ea27-116">La **condizione** testata è false.</span><span class="sxs-lookup"><span data-stu-id="7ea27-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="7ea27-117">Non esiste codice da eseguire perché è stato scritto solo uno dei possibili rami per un'istruzione `if`, ovvero il ramo true.</span><span class="sxs-lookup"><span data-stu-id="7ea27-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="7ea27-118">Mentre si impara a usare C# (o qualsiasi linguaggio di programmazione) sicuramente si commetteranno errori durante la scrittura del codice.</span><span class="sxs-lookup"><span data-stu-id="7ea27-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="7ea27-119">Il **compilatore** troverà questi errori e li segnalerà.</span><span class="sxs-lookup"><span data-stu-id="7ea27-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="7ea27-120">Quando l'output contiene messaggi di errore, esaminare attentamente il codice di esempio e il codice nella finestra interattiva per scoprire cosa correggere.</span><span class="sxs-lookup"><span data-stu-id="7ea27-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="7ea27-121">Questo esercizio sarà utile per imparare la struttura del codice C#.</span><span class="sxs-lookup"><span data-stu-id="7ea27-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="7ea27-122">Questo primo esempio dimostra le potenzialità di `if` e dei tipi booleani.</span><span class="sxs-lookup"><span data-stu-id="7ea27-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="7ea27-123">Un valore *booleano* è una variabile che può avere uno di due valori: `true` o `false`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="7ea27-124">C# definisce un tipo speciale, `bool` per le variabili booleane.</span><span class="sxs-lookup"><span data-stu-id="7ea27-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="7ea27-125">L'istruzione `if` controlla il valore di un `bool`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="7ea27-126">Quando il valore è `true`, viene eseguita l'istruzione che segue `if`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="7ea27-127">In caso contrario, l'istruzione viene ignorata.</span><span class="sxs-lookup"><span data-stu-id="7ea27-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="7ea27-128">Questo processo di controllo delle condizioni ed esecuzione di istruzioni in base a queste condizioni offre molte potenzialità.</span><span class="sxs-lookup"><span data-stu-id="7ea27-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="7ea27-129">L'esplorazione continua nelle prossime lezioni.</span><span class="sxs-lookup"><span data-stu-id="7ea27-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7ea27-130">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="7ea27-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7ea27-131">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7ea27-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7ea27-132">Usare insieme if ed else</span><span class="sxs-lookup"><span data-stu-id="7ea27-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"7ea27-133\">Per eseguire codice diverso per i rami true e false, è necessario creare un ramo `else` che viene eseguito quando la condizione è false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"7ea27-134\">Provare questo codice:</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"7ea27-135\">L'istruzione che segue la parola chiave `else` viene eseguita solo quando la condizione testata è `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"7ea27-136\">La combinazione di `if` e `else` con condizioni booleane offre tutte le potenzialità necessarie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"7ea27-137\">Il rientro applicato alle righe successive alle istruzioni `if` e `else` è pensato per i lettori umani.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"7ea27-138\">Nel linguaggio C# i rientri o gli spazi vuoti non sono significativi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"7ea27-139\">L'istruzione che segue la parola chiave `if` o `else` verrà eseguita in base alla condizione.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"7ea27-140\">Tutti gli esempi in questa esercitazione seguono una procedura comune che prevede il rientro delle righe in base al flusso di controllo delle istruzioni.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"7ea27-141\">Dato che il rientro non è significativo, è necessario usare `{` e `}` per indicare quando si vuole includere più di un'istruzione nel blocco con esecuzione condizionale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"7ea27-142\">I programmatori C# usano in genere le parentesi graffe in tutte le clausole `if` e `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"7ea27-143\">L'esempio seguente è identico a quello appena creato.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"7ea27-144\">Provarlo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"7ea27-145\">Nelle parti restanti di questa esercitazione, tutti gli esempi di codice includono le parentesi graffe conformemente alle consuetudini comuni.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"7ea27-146\">È possibile testare condizioni più complesse:</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"7ea27-147\">Il simbolo `==` verifica l'*uguaglianza*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"7ea27-148\">Il simbolo `==` distingue il test per l'uguaglianza dall'assegnazione, illustrata in `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"7ea27-149\">`&&` rappresenta \"e\"</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"7ea27-150\">e significa che entrambe le condizioni devono essere true per eseguire l'istruzione nel ramo true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"7ea27-151\">Questi esempi mostrano anche che è possibile includere più istruzioni in ogni ramo condizionale, a condizione di racchiuderle tra `{` e `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"7ea27-152\">È anche possibile usare `||` per rappresentare \"o\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"7ea27-153\">Modificare i valori di `a`, `b` e `c` e passare da `&&` a `||` per esplorare.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"7ea27-154\">Si otterranno più informazioni sul funzionamento degli operatori `&&` e `||`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"7ea27-155\">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"7ea27-156\">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"7ea27-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="7ea27-157">Usare i cicli per ripetere le operazioni</span><span class="sxs-lookup"><span data-stu-id="7ea27-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="7ea27-158">I **cicli** rappresentano un altro concetto importante per la creazione di programmi di più grandi dimensioni.</span><span class="sxs-lookup"><span data-stu-id="7ea27-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="7ea27-159">I cicli vengono usati per ripetere istruzioni che si vuole eseguire più volte.</span><span class="sxs-lookup"><span data-stu-id="7ea27-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="7ea27-160">Provare questo codice nella finestra interattiva:</span><span class="sxs-lookup"><span data-stu-id="7ea27-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="7ea27-161">L'istruzione `while` verifica una condizione ed esegue l'istruzione che segue `while`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="7ea27-162">Ripeterà la verifica della condizione e l'esecuzione di tali istruzioni fino a quando la condizione è false.</span><span class="sxs-lookup"><span data-stu-id="7ea27-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="7ea27-163">Questo esempio include un altro operatore nuovo.</span><span class="sxs-lookup"><span data-stu-id="7ea27-163">There's one other new operator in this example.</span></span> <span data-ttu-id="7ea27-164">I caratteri `++` dopo la variabile `counter` rappresentano l'operatore di **incremento**.</span><span class="sxs-lookup"><span data-stu-id="7ea27-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="7ea27-165">Questo operatore aggiunge 1 al valore del contatore e archivia il valore nella variabile contatore.</span><span class="sxs-lookup"><span data-stu-id="7ea27-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="7ea27-166">Assicurarsi che la condizione del ciclo `while` passi a false quando si esegue il codice.</span><span class="sxs-lookup"><span data-stu-id="7ea27-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="7ea27-167">In caso contrario, si crea un **ciclo infinito** in cui il programma non termina mai.</span><span class="sxs-lookup"><span data-stu-id="7ea27-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="7ea27-168">Non è prevista una dimostrazione di questo scenario, perché in questo caso si verifica il timeout del motore che esegue il codice e il programma non produrrà alcun output.</span><span class="sxs-lookup"><span data-stu-id="7ea27-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="7ea27-169">Il ciclo `while` testa la condizione prima di eseguire il codice dopo `while`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="7ea27-170">Il ciclo `do` ... `while` esegue prima il codice e poi controlla la condizione,</span><span class="sxs-lookup"><span data-stu-id="7ea27-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="7ea27-171">come segue:</span><span class="sxs-lookup"><span data-stu-id="7ea27-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="7ea27-172">Questo ciclo `do` e il ciclo `while` precedente funzionano allo stesso modo.</span><span class="sxs-lookup"><span data-stu-id="7ea27-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="7ea27-173">Nella prossima lezione verrà presentata un'ultima istruzione di ciclo.</span><span class="sxs-lookup"><span data-stu-id="7ea27-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7ea27-174">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="7ea27-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7ea27-175">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7ea27-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7ea27-176">Usare il ciclo for</span><span class="sxs-lookup"><span data-stu-id="7ea27-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="7ea27-177">Un'altra istruzione di ciclo comune nel codice C# è il ciclo `for`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="7ea27-178">Provare questo codice nella finestra interattiva:</span><span class="sxs-lookup"><span data-stu-id="7ea27-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="7ea27-179">Questo codice esegue le stesse operazioni di ciclo `while` e `do` già usate.</span><span class="sxs-lookup"><span data-stu-id="7ea27-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="7ea27-180">L'istruzione `for` è composta da tre parti che ne controllano il funzionamento.</span><span class="sxs-lookup"><span data-stu-id="7ea27-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="7ea27-181">La prima parte è l'**inizializzatore for**: `int counter = 0;` dichiara che `counter` è la variabile di ciclo e imposta il valore iniziale su `0`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="7ea27-182">La parte centrale è la **condizione for**: `counter < 10` dichiara che questo ciclo `for` continua l'esecuzione fino a quando il valore del contatore è minore di 10.</span><span class="sxs-lookup"><span data-stu-id="7ea27-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="7ea27-183">La parte finale è l'**iteratore for**: `counter++` specifica come modificare la variabile di ciclo dopo l'esecuzione del blocco successivo all'istruzione `for`.</span><span class="sxs-lookup"><span data-stu-id="7ea27-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="7ea27-184">In questo caso, specifica che `counter` deve essere incrementato di 1 a ogni esecuzione del blocco.</span><span class="sxs-lookup"><span data-stu-id="7ea27-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="7ea27-185">Sperimentare da soli questi elementi.</span><span class="sxs-lookup"><span data-stu-id="7ea27-185">Experiment with these yourself.</span></span> <span data-ttu-id="7ea27-186">Eseguire queste prove:</span><span class="sxs-lookup"><span data-stu-id="7ea27-186">Try each of the following:</span></span>


    - <span data-ttu-id="7ea27-187">Cambiare l'inizializzatore in modo che inizi da un valore diverso.</span><span class="sxs-lookup"><span data-stu-id="7ea27-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="7ea27-188">Cambiare la condizione in modo che si interrompa in corrispondenza di un valore diverso.</span><span class="sxs-lookup"><span data-stu-id="7ea27-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="7ea27-189">Al termine, passare alla prossima lezione che prevede la scrittura di codice per usare quanto finora appreso.</span><span class="sxs-lookup"><span data-stu-id="7ea27-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7ea27-190">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="7ea27-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7ea27-191">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7ea27-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7ea27-192">Combinare rami e cicli</span><span class="sxs-lookup"><span data-stu-id="7ea27-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="7ea27-193">Dopo aver esaminato l'istruzione `if` e i costrutti per i cicli nel linguaggio C#, provare a scrivere codice C# per ottenere la somma di tutti i numeri interi da 1 a 20 divisibili per 3.</span><span class="sxs-lookup"><span data-stu-id="7ea27-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="7ea27-194">Ecco alcuni suggerimenti:</span><span class="sxs-lookup"><span data-stu-id="7ea27-194">Here are a few hints:</span></span>


    - <span data-ttu-id="7ea27-195">L'operatore `%` restituisce il resto di un'operazione di divisione.</span><span class="sxs-lookup"><span data-stu-id="7ea27-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="7ea27-196">L'istruzione `if` offre la condizione per stabilire se un numero deve fare parte della somma.</span><span class="sxs-lookup"><span data-stu-id="7ea27-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="7ea27-197">Il ciclo `for` può essere utile per ripetere una serie di passaggi per tutti i numeri da 1 a 20.</span><span class="sxs-lookup"><span data-stu-id="7ea27-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="7ea27-198">Sperimentare e quindi</span><span class="sxs-lookup"><span data-stu-id="7ea27-198">Try it yourself.</span></span> <span data-ttu-id="7ea27-199">controllare i risultati.</span><span class="sxs-lookup"><span data-stu-id="7ea27-199">Then check how you did.</span></span> <span data-ttu-id="7ea27-200">Come risposta si riceverà il valore 63.</span><span class="sxs-lookup"><span data-stu-id="7ea27-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7ea27-201">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="7ea27-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7ea27-202">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7ea27-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7ea27-203">Completare l'esercizio</span><span class="sxs-lookup"><span data-stu-id="7ea27-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="7ea27-204">I risultati ottenuti sono simili a questi?</span><span class="sxs-lookup"><span data-stu-id="7ea27-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="7ea27-205">Questa esperienza di scrittura del codice online è in modalità di anteprima.</span><span class="sxs-lookup"><span data-stu-id="7ea27-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7ea27-206">Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7ea27-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7ea27-207">La procedura è stata completata.</span><span class="sxs-lookup"><span data-stu-id="7ea27-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="7ea27-208">È stata completata l'esercitazione interattiva "Rami e cicli".</span><span class="sxs-lookup"><span data-stu-id="7ea27-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="7ea27-209">Fare clic sul collegamento **raccolte di elenchi** qui sotto per avviare la prossima esercitazione interattiva oppure visitare il [sito Web .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) per scaricare .NET Core SDK, creare un progetto nel proprio computer e continuare a scrivere codice.</span><span class="sxs-lookup"><span data-stu-id="7ea27-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="7ea27-210">La sezione "passaggi successivi" riporta a queste esercitazioni.</span><span class="sxs-lookup"><span data-stu-id="7ea27-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="7ea27-211">Maggiori informazioni su questi concetti sono disponibili in questi argomenti:</span><span class="sxs-lookup"><span data-stu-id="7ea27-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="7ea27-212">Istruzioni if ed else</span><span class="sxs-lookup"><span data-stu-id="7ea27-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="7ea27-213">Istruzione while</span><span class="sxs-lookup"><span data-stu-id="7ea27-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="7ea27-214">Istruzione do</span><span class="sxs-lookup"><span data-stu-id="7ea27-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="7ea27-215">Istruzione for</span><span class="sxs-lookup"><span data-stu-id="7ea27-215">For statement</span></span>](../../language-reference/keywords/for.md)
